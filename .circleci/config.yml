---
version: 2.1

orbs:
  win: circleci/windows@2.2.0

executors:
  linux_executor:
    docker:
      - image: circleci/openjdk:11.0.4-jdk-stretch
        auth:
          username: $DOCKER_USER_RO
          password: $DOCKER_PASSWORD_RO
    resource_class: medium
    working_directory: ~/jblst
    environment:
      GRADLE_OPTS: -Xmx2048m -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2
  armv8_linux_executor:
    machine:
      enabled: true
      image: ubuntu-1604:202010-01
  mac_os_executor:
    macos:
      xcode: "12.4.0"
    resource_class: medium
    working_directory: ~/jblst
    environment:
      GRADLE_OPTS: -Xmx2048m -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2
      HOMEBREW_NO_AUTO_UPDATE: true

commands:
  checkout_code:
    description: "Prepare - Checkout code"
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update

  prepare_linux:
    description: "Generate Linux shared lib"
    steps:
      - run:
          name: Install dependencies
          command: |
            echo "Installing swig dependencies"
            sudo apt-get update
            sudo apt-get install -y autoconf libpcre3 libpcre3-dev bison flex

            echo "Installing swig"
            curl -L -O https://github.com/swig/swig/archive/v4.0.2.tar.gz
            tar -xzvf v4.0.2.tar.gz
            cd swig-4.0.2/
            sh autogen.sh
            ./configure
            make
            sudo make install

      - run:
          name: Generate linux shared lib
          command: |
            cd blst
            ./build.sh -D__BLST_PORTABLE__
            ./bindings/java/run.me

      - persist_to_workspace:
          root: ./blst/bindings/java/supranational/blst/Linux
          paths:
            - ./

  prepare_macos:
    description: "Generate macOS shared lib"
    steps:
      - run:
          name: Install dependencies
          command: |
            echo "Installing openjdk 11 for test execution"
            brew install openjdk@11
            sudo ln -sfn /usr/local/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-11.jdk

            echo "Installing swig"
            brew install swig@4.0
            brew install gnu-sed

      - run:
          name: Generate mac os shared lib
          command: |
            cd blst
            ./build.sh -D__BLST_PORTABLE__
            ./bindings/java/run.me
      - persist_to_workspace:
          root: ./blst/bindings/java/supranational/blst/Mac
          paths:
            - ./

  prepare_windows:
    description: "Generate windows shared lib"
    steps:
      - run:
          name: Install dependencies
          command: |
            $ErrorActionPreference = 'SilentlyContinue'
            choco install mingw --force --x64
            choco install swig

      - run:
          name: Generate windows shared lib
          command: |
            $Env:MSYSTEM = "MINGW"
            $Env:CC = "gcc"

            cd blst
            .\build.bat -D__BLST_PORTABLE__
            sh .\bindings\java\run.me
#            sh blst/bindings/java/run.me
#            cp blst/bindings/java/blst.dll src/main/resources/x86_64/
      - persist_to_workspace:
          root: ./blst/bindings/java/supranational
          paths:
            - ./

  prepare_armv8:
    description: "Prepare armv8"
    steps:
      - run:
          name: Prepare armv8 build
          command: |
            cd blst
            sudo apt-get update
            sudo apt-get install -y git
            cd ..
            chmod a+x .circleci/*.sh
            .circleci/build-armv8.sh
      - persist_to_workspace:
          root: ./src/main/resources/
          paths:
            - aarch64/libblst.so

jobs:
  x86-64-linux-build:
    executor: linux_executor
    environment:
      SKIP_GRADLE: true
    steps:
      - checkout_code
      - prepare_linux
  arm64-linux-build:
    executor: armv8_linux_executor
    environment:
      - DOCKER_IMAGE=arm64v8/debian:buster
      - CONTAINER_DISTRO=debian:buster
      - PKG_RELEASE=buster
      - PKG_DISTRO=debian
      - EMU=on
      - SKIP_GRADLE: true
    steps:
      - checkout_code
      - prepare_armv8
  mac-os-build:
    executor: mac_os_executor
    environment:
      SKIP_GRADLE: true
    steps:
      - checkout_code
      - prepare_macos
  windows-build:
    executor: win/default
    environment:
      SKIP_GRADLE: true
    steps:
      - checkout_code
      - prepare_windows
  assemble:
    executor: linux_executor
    steps:
      - checkout_code
      - attach_workspace:
          at: ~/jbslt
      - run:
          name: Create build
          command: |
            ls -R blst/bindings/java/supranational

            cd blst/bindings/java/
            jar tvf ../../../blst-test.jar supranational
#            echo "Copying attached native libraries to resources"
#            cp libblst.dylib ./src/main/resources/x86_64/
#            cp aarch64/libblst.so ./src/main/resources/aarch64/
#            cp x86_64/libblst.so ./src/main/resources/x86_64/
#            cp blst.dll ./src/main/resources/x86_64/
#            ./gradlew --no-daemon --parallel build
      - persist_to_workspace:
          root: .
          paths:
            - ./

      - store_artifacts:
          name: BLST jar
          path:  blst-test.jar
          destination: distributions
  publish:
    executor: linux_executor
    steps:
      - checkout_code
      - attach_workspace:
          at: .
      - run:
          name: Publish
          command: |
            ./gradlew --no-daemon --parallel publish

workflows:
  version: 2
  default:
    jobs:
      - x86-64-linux-build:
          filters:
            tags: &filters-release-tags
              only: /^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?/
          context:
            - dockerhub-quorumengineering-ro
#      - arm64-linux-build:
#          filters:
#            tags:
#              <<: *filters-release-tags
#          context:
#            - dockerhub-quorumengineering-ro
      - mac-os-build:
          filters:
            tags:
              <<: *filters-release-tags
          context:
            - dockerhub-quorumengineering-ro
      - windows-build:
          filters:
            tags:
              <<: *filters-release-tags
          context:
            - dockerhub-quorumengineering-ro
      - assemble:
          requires:
            - x86-64-linux-build
#            - arm64-linux-build
            - mac-os-build
            - windows-build
          filters:
            tags:
              <<: *filters-release-tags
          context:
            - dockerhub-quorumengineering-ro
      - publish:
          requires:
            - assemble
          filters:
            tags:
              <<: *filters-release-tags
            branches:
              only:
                - master
                - /^release-.*/
          context:
            - quorum-gradle
            - dockerhub-quorumengineering-ro